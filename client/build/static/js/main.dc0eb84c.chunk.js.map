{"version":3,"sources":["img/navlogo.png","img/landing/keepCalm.png","img/landing/happyCommunity.jpg","img/landing/innovation.jpg","img/landing/writersLove.jpg","components/reusable/Navbar.js","components/reusable/Typed.js","components/landing/LandingCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","src","logo","alt","Typed","this","typed","Typedjs","el","strings","typeSpeed","backSpeed","loop","loopCount","Infinity","destroy","ref","React","Component","LandingCard","image","imageAlt","text","App","keepCalm","happyCommunity","innovation","writersLove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,qC,iBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,qOCG5B,SAASC,EAAOC,GAC3B,OACI,yBAAKC,UAAU,UACb,wBAAIA,UAAU,eACZ,yBAAKA,UAAU,aAAaC,IAAKC,IAAMC,IAAI,SAC3C,uCACA,qCACA,oCACA,oCACA,wBAAIH,UAAU,gBAAd,a,oBCTSI,E,kLAEbC,KAAKC,MAAQ,IAAIC,IAAQF,KAAKG,GAAI,CAChCC,QAASJ,KAAKN,MAAMU,QACpBC,UAAWL,KAAKN,MAAMW,WAAa,GACnCC,UAAWN,KAAKN,MAAMY,WAAa,GACnCC,KAAMP,KAAKN,MAAMa,OAAQ,EACzBC,UAAWR,KAAKN,MAAMc,WAAaC,Q,6CAIrCT,KAAKC,MAAMS,Y,+BAEL,IAAD,OACL,OAAO,0BAAMC,IAAK,SAACR,GAAS,EAAKA,GAAKA,GAAOR,UAAU,uB,GAd5BiB,IAAMC,WCF1B,SAASC,EAAYpB,GAAQ,IAEpCqB,EAGArB,EAHAqB,MACAC,EAEAtB,EAFAsB,SACAC,EACAvB,EADAuB,KAEJ,OACI,yBAAKtB,UAAU,eACf,yBAAKC,IAAKmB,EAAOjB,IAAKkB,IACtB,2BAAIC,I,uECASC,E,uKAGjB,OACE,yBAAKvB,UAAU,OACd,kBAAC,EAAD,MACA,4BAAI,kBAAC,EAAD,CAAOS,QACZ,CACE,yBACA,wBACA,eACA,8BACA,8CACA,wEACA,mCACA,iCACA,gEACA,+DAGDG,MAAM,KAEN,2DACA,yBAAKZ,UAAU,gBACf,kBAACmB,EAAD,CACCC,MAAOI,IACPH,SAAS,kCACTC,KAAI,0KAGF,kBAACH,EAAD,CACFC,MAAOK,IACPJ,SAAS,gBACTC,KAAI,qIAEH,kBAACH,EAAD,CACDC,MAAOM,IACPL,SAAS,sBACTC,KAAI,uHAEF,kBAACH,EAAD,CACFC,MAAOO,IACPN,SAAS,OACTC,KAAI,2J,GA3CqBL,IAAMC,WCEnBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc0eb84c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/navlogo.49b2597f.png\";","module.exports = __webpack_public_path__ + \"static/media/keepCalm.19057d04.png\";","module.exports = __webpack_public_path__ + \"static/media/happyCommunity.910bdf94.jpg\";","module.exports = __webpack_public_path__ + \"static/media/innovation.835b3bb7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/writersLove.af11bb3f.jpg\";","import React from 'react';\r\nimport '../../css/Navbar.css';\r\nimport logo from '../../img/navlogo.png';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div className=\"Navbar\">\r\n          <ul className=\"NavbarItems\">\r\n            <img className='NavbarLogo' src={logo} alt=\"logo\"/>  \r\n            <li>Profile</li>\r\n            <li>Write</li>\r\n            <li>Read</li>\r\n            <li>Chat</li>\r\n            <li className='NavbarLogout'>Log Out</li>        \r\n          </ul>  \r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Typedjs from 'typed.js';\r\n\r\nexport default class Typed extends React.Component {\r\n    componentDidMount() {\r\n        this.typed = new Typedjs(this.el, {\r\n          strings: this.props.strings,\r\n          typeSpeed: this.props.typeSpeed || 70,\r\n          backSpeed: this.props.backSpeed || 70,\r\n          loop: this.props.loop || false,\r\n          loopCount: this.props.loopCount || Infinity\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        this.typed.destroy();\r\n    }\r\n    render() {\r\n        return <span ref={(el) => { this.el = el; }} className=\"TypedContainer\"></span>\r\n    }\r\n}","import React from 'react';\r\nexport default function LandingCard(props) {\r\n    const {\r\n        image,\r\n        imageAlt,\r\n        text,\r\n    } = props;\r\n    return (\r\n        <div className='LandingCard'>\r\n        <img src={image} alt={imageAlt} />\r\n        <p>{text}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport Navbar from './components/reusable/Navbar';\nimport Typed from './components/reusable/Typed';\nimport LandingCard from './components/landing/LandingCard';\n\nimport keepCalm from './img/landing/keepCalm.png';\nimport happyCommunity from './img/landing/happyCommunity.jpg';\nimport innovation from './img/landing/innovation.jpg';\nimport writersLove from './img/landing/writersLove.jpg';\nexport default class App extends React.Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n       <Navbar /> \n       <h1><Typed strings={\n      [\n        'Fanfiction. Redefined.',\n        'Collaborative writing',\n        'Snappy chat!',\n        'Major Social-Media Support.',\n        'Turn your favorite story into an audiobook!',\n        'Write your story with voice alone without ever touching the keyboard!',\n        'Light and easy to use interface!',\n        'YouTube videos inside stories!',\n        'Include your own illustrations and cover artwork for stories!',\n        'Never give up and one day you will achieve something great!'\n      ]\n       }\n       loop={true}\n       /></h1>\n       <h2>So, what is this all about?</h2>\n       <div className='LandingCards'>\n       <LandingCard \n        image={keepCalm}\n        imageAlt='Keep calm and write fanfiction!'\n        text={`in \"The Wave\" we don't let YOUR creative freedom to be strangled by a clunky UI and laggy back-end! \n               You write fanfiction â€” we handle the rest!`}\n       />\n          <LandingCard \n        image={happyCommunity}\n        imageAlt='Our Community'\n        text={`Our nurturing community will help new authors to really hone their skill and become better! You will make a lot of friends here!`}\n       />\n         <LandingCard \n        image={innovation}\n        imageAlt='We bring new ideas!'\n        text={`We are eager to bring new ideas to the table! Collaborative writing, Text-To-Speech and much more awaits you here!`}\n       />\n          <LandingCard \n        image={writersLove}\n        imageAlt='Love'\n        text={`Built by writers for writers! We have experienced all the painpoints of major fanfiction platforms and this project is a remedy for all of them!`}\n       />\n       </div>\n      </div>\n    )\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}